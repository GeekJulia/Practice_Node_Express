Cannot get / ==> means it cannot find the / route
This is where you then setup different routes

app.get,app.post, app.put,app.delete
app.get("path", (this is a function that takes three differentparameters))

res.download("server.js") //  downloads a file named server.js
To render a html file ==> res.render("index") , you pass in the name of the file you want to render

res.sendStatus(500)
res.status(500).json({message : "Hi"}) //you can chain statuses and sending down text string or a json
res.send("Hi") // this sends down whatever we pass into it, is pretty generic

You can run your server code in your express to output what is inside your views ==> html/css/js
That means you can pass down information into your html file or js file, to do that you need a view engine

You can also pass down information from your server to your views, res.render({text : "Hello"})
then in your ejs file ==> Hello <%= 2+2 %> // this tells html that there is a code coming from the server and it 
should output it and also run whatever is between it

whatever code is placed between <% %> , is ran on the server before been outputted to the page
Hello <%= locals.text || "Default" %>

So instead of putting all your routes inside your main app, moveit into its own folder
to create a mini app with router = express.router
that way you can call the http functions on router ie router.get, router.post etc

const userRouter = require ("./routes/user") // import and require file

app.use("/users",userRouter) // linking the mini app with the main app, adding 
/users so every route in that file starts with /users automatically

app.listen(3000) //the application is listening on port 3000 for a bunch of request to make it actually run

router.post("/:id",(req,res) => { // a dynamic parameter, where it validates anything and returns the response
    res.send(`Get user with ID ${req.params.id}`)
})
CHANING ROUTES 
You can chain all of your get, put and delete code with router.route
router.route("/:id").get().put().delete()

So then we have two ways ==> 
router
.route("/:id")
.get((req,res) => {
    res.send(`Get user with ID ${req.params.id}`)
})
.put((req,res) => {
    res.send(`Update user with ID ${req.params.id}`)
})
.delete((req,res) => {
    res.send(`Delete user with ID ${req.params.id}`)
})
AND 
router.get("/:id", (req,res) => {
    res.send(`Get user with ID ${req.params.id}`)
})
router.put("/:id", (req,res) => {
    res.send(`Update user with ID ${req.params.id}`)
})
router.delete("/:id", (req,res) => {
    res.send(`Delete user with ID ${req.params.id}`)
})

router.param() ==> This runs anytime it finds a parameter that matches the name you pass into it
router.param("id", (req,res,next,id) => { //anytime you encounter a parameter with id, run the code with the req,res,next and id
    console.log(id)
})

app.use(logger) // at top of the page
function logger(req,res,next){
    console.log(req.originalUrl)
    next()
}
To render or pass down from server to html
index.html ==> <body>
    Hello <%= locals.text || "Default" %>
</body>
server.js ===> app.get("/",logger,(req,res) =>{ //anytime they navigate to /
    res.render("index", {text : "World"})
})

app.use(express.static("public")) //this is a middleware that will serve all the static folders from public as it is

req.body.firstName //this firstName has to be the same with the name given to the input element in your html

res.redirect(`/users/${users.length - 1}`) //you can use res.redirect to redirect the user to anywhere
app.use(express.json()) //allows you to pass json info from the body
console.log(req.query.name) //the name represents the name that was given in the searchbar as in name=Kyle

res.redirect(`/users/${users.length - 1}`) //you can use res.redirect to redirect the user to anywhere
app.use(express.json()) //allows you to pass json info from the body
console.log(req.query.name) //the name represents the name that was given in the searchbar as in name=Kyle