Cannot get / ==> means it cannot find the / route
This is where you then setup different routes

app.get,app.post, app.put,app.delete
app.get("path", (this is a function that takes three differentparameters))

Website status codes are part of the HTTP response status codes returned by a web server when a request is made. 
They indicate whether the request was successful or if there were issues.

🌐 HTTP Status Code Categories
1xx - Informational Responses: Request received, continuing process.

2xx - Success: Request successfully received, understood, and accepted.

3xx - Redirection: Further action needs to be taken to complete the request.

4xx - Client Errors: Request contains bad syntax or cannot be fulfilled.

5xx - Server Errors: Server failed to fulfill a valid request.

✅ Common HTTP Status Codes
Code	Name	Description
1xx Informational		
100	Continue	Request received, please continue.
101	Switching Protocols	Switching to a different protocol as requested.
2xx Success		
200	OK	Request succeeded, response body contains the data.
201	Created	Resource successfully created (e.g., after POST request).
204	No Content	Request successful, but no content to return.
3xx Redirection		
301	Moved Permanently	Resource has been permanently moved to a new URL.
302	Found	Temporarily moved to another URL.
304	Not Modified	Cached version of resource can be used.
4xx Client Errors		
400	Bad Request	Request cannot be processed due to client error.
401	Unauthorized	Authentication required.
403	Forbidden	Client does not have permission.
404	Not Found	Resource could not be found.
405	Method Not Allowed	HTTP method not allowed for the requested resource.
429	Too Many Requests	Rate limit exceeded.
5xx Server Errors		
500	Internal Server Error	Generic server error.
502	Bad Gateway	Invalid response from upstream server.
503	Service Unavailable	Server is down or overloaded.
504	Gateway Timeout	Upstream server did not respond in time.

res.download("server.js") //  downloads a file named server.js
To render a html file ==> res.render("index") , you pass in the name of the file you want to render

res.sendStatus(500)
res.status(500).json({message : "Hi"}) //you can chain statuses and sending down text string or a json
res.send("Hi") // this sends down whatever we pass into it, is pretty generic

You can run your server code in your express to output what is inside your views ==> html/css/js
That means you can pass down information into your html file or js file, to do that you need a view engine

You can also pass down information from your server to your views, res.render({text : "Hello"})
then in your ejs file ==> Hello <%= 2+2 %> // this tells html that there is a code coming from the server and it 
should output it and also run whatever is between it

whatever code is placed between <% %> , is ran on the server before been outputted to the page
Hello <%= locals.text || "Default" %>

So instead of putting all your routes inside your main app, moveit into its own folder
to create a mini app with router = express.router
that way you can call the http functions on router ie router.get, router.post etc

const userRouter = require ("./routes/user") // import and require file

app.use("/users",userRouter) // linking the mini app with the main app, adding 
/users so every route in that file starts with /users automatically

app.listen(3000) //the application is listening on port 3000 for a bunch of request to make it actually run

router.post("/:id",(req,res) => { // a dynamic parameter, where it validates anything and returns the response
    res.send(`Get user with ID ${req.params.id}`)
})
CHANING ROUTES 
You can chain all of your get, put and delete code with router.route
router.route("/:id").get().put().delete()

So then we have two ways ==> 
router
.route("/:id")
.get((req,res) => {
    res.send(`Get user with ID ${req.params.id}`)
})
.put((req,res) => {
    res.send(`Update user with ID ${req.params.id}`)
})
.delete((req,res) => {
    res.send(`Delete user with ID ${req.params.id}`)
})
AND 
router.get("/:id", (req,res) => {
    res.send(`Get user with ID ${req.params.id}`)
})
router.put("/:id", (req,res) => {
    res.send(`Update user with ID ${req.params.id}`)
})
router.delete("/:id", (req,res) => {
    res.send(`Delete user with ID ${req.params.id}`)
})

router.param() ==> This runs anytime it finds a parameter that matches the name you pass into it
router.param("id", (req,res,next,id) => { //anytime you encounter a parameter with id, run the code with the req,res,next and id
    console.log(id)
})

app.use(logger) // at top of the page
function logger(req,res,next){
    console.log(req.originalUrl)
    next()
}
To render or pass down from server to html
index.html ==> <body>
    Hello <%= locals.text || "Default" %>
</body>
server.js ===> app.get("/",logger,(req,res) =>{ //anytime they navigate to /
    res.render("index", {text : "World"})
})

app.use(express.static("public")) //this is a middleware that will serve all the static folders from public as it is

req.body.firstName //this firstName has to be the same with the name given to the input element in your html

res.redirect(`/users/${users.length - 1}`) //you can use res.redirect to redirect the user to anywhere
app.use(express.json()) //allows you to pass json info from the body